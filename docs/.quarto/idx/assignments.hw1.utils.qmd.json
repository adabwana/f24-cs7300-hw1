{"title":"Utils","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw1.utils.html"}},"fontsize":"0.9em","code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"Utils","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw1.utils_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw1.utils_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw1.utils\n  (:require\n   [scicloj.kindly.v4.api :as kindly]\n   [scicloj.kindly.v4.kind :as kind]\n   [tablecloth.api :as tc]\n   [tech.v3.datatype.functional :as dtf]\n   [uncomplicate.neanderthal\n    [core :refer [col entry nrm2 mv mrows ncols\n                  scal axpy copy mm dia trans]]\n    [native :refer [dge]]\n    [linalg :refer [ev! svd]]]))\n```\n:::\n\n\n\nFormatting code\n\n\n::: {.sourceClojure}\n```clojure\n(def md (comp kindly/hide-code kind/md))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def question (fn [content] ((comp kindly/hide-code kind/md) (str \"## \" content \"\\n---\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-question (fn [content] ((comp kindly/hide-code kind/md) (str \"#### *\" content \"*\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-sub (fn [content] ((comp kindly/hide-code kind/md) (str \"***\" content \"***\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def formula (comp kindly/hide-code kind/tex))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def answer \n  (fn [content] \n    (kind/md \n     (str \"> <span style=\\\"color: black; font-size: 1.5em;\\\">**\" content \"**</span>\"))))\n```\n:::\n\n\nnormalize/standardize\n\n\n::: {.sourceClojure}\n```clojure\n(defn tc-col->vec\n  [data col]\n  (vec (col (tc/select-columns data col))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn normalize-column\n  \"Normalize a column using min-max normalization\"\n  [col]\n  (let [min-val (apply min col)\n        max-val (apply max col)]\n    (map #(/ (- % min-val) (- max-val min-val)) col)))\n```\n:::\n\n\nTODO: in neanderthal, use dge/mean and dge/std-dev\n\n\n::: {.sourceClojure}\n```clojure\n(defn standardize-column\n  \"Standardize a column using z-score normalization\"\n  [col]\n  (let [mean (dtf/mean col)\n        std (dtf/standard-deviation col)]\n    (map #(/ (- % mean) std) col)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn apply-to-all-columns\n  \"Apply a function to all columns of a dataset\"\n  [data func]\n  (reduce (fn [acc col-name]\n            (tc/add-column acc col-name (func (col-name data))))\n          (tc/dataset)\n          (tc/column-names data)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [data (tc/dataset {:age [20 30 35 40 50]\n                        :income [30000 40000 59000 55000 90000]\n                        :credit-score [650 700 750 800 850]})\n\n      normalized-data (apply-to-all-columns data normalize-column)]\n  (tc/dataset normalized-data))\n```\n:::\n\n\n::: {.clay-dataset}\n_unnamed [5 3]:\n\n|   :age | :income | :credit-score |\n|--------|---------|---------------|\n|      0 |       0 |             0 |\n| 0.3333 |  0.1667 |        0.2500 |\n| 0.5000 |  0.4833 |        0.5000 |\n| 0.6667 |  0.4167 |        0.7500 |\n|      1 |       1 |             1 |\n\n\n:::\n\n\ncenter\n\n\n::: {.sourceClojure}\n```clojure\n(defn matrix->dataset\n  \"Transforms a Neanderthal matrix into a Tablecloth dataset.\n   Columns are named x1 to xp, where p is the number of columns in the matrix.\"\n  [matrix]\n  (let [rows (mrows matrix)\n        cols (ncols matrix)\n        column-names (mapv #(keyword (str \"x\" (inc %))) (range cols))\n        data (for [i (range rows)]\n               (for [j (range cols)]\n                 (entry matrix i j)))]\n    (tc/dataset (map (fn [row] (zipmap column-names row)) data))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn dataset->matrix\n  \"Converts a Tablecloth dataset to a Neanderthal matrix.\"\n  [dataset]\n  (let [X (tc/rows dataset :as-seqs)]                       ;opt ':as-seq' is default\n    (dge (count X) (count (first X))                        ;{:layout :column} is default\n         (flatten X) {:layout :row})))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn center-data\n  \"Centers the data by subtracting the mean of each column.\n   Parameters:\n   - data: Neanderthal matrix to be centered\"\n  [data]\n  (let [mean-vec (dge 1 (ncols data) (map #(/ (reduce + %) (mrows data)) (trans data)))\n        centered-data (axpy -1 (mm (dge (mrows data) 1 (repeat (mrows data) 1)) mean-vec) data)]\n    centered-data))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn compute-covariance-matrix\n    \"Computes the covariance matrix of the centered data.\n    Parameters:\n    - centered-data: Centered Neanderthal matrix\"\n    [centered-data]\n    (mm (trans centered-data) centered-data))\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw1.utils_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw1.utils_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw1.utils\n  (:require\n   [scicloj.kindly.v4.api :as kindly]\n   [scicloj.kindly.v4.kind :as kind]\n   [tablecloth.api :as tc]\n   [tech.v3.datatype.functional :as dtf]\n   [uncomplicate.neanderthal\n    [core :refer [col entry nrm2 mv mrows ncols\n                  scal axpy copy mm dia trans]]\n    [native :refer [dge]]\n    [linalg :refer [ev! svd]]]))\n```\n:::\n\n\n## Utils\n\nFormatting code\n\n\n::: {.sourceClojure}\n```clojure\n(def md (comp kindly/hide-code kind/md))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def question (fn [content] ((comp kindly/hide-code kind/md) (str \"## \" content \"\\n---\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-question (fn [content] ((comp kindly/hide-code kind/md) (str \"#### *\" content \"*\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def sub-sub (fn [content] ((comp kindly/hide-code kind/md) (str \"***\" content \"***\"))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def formula (comp kindly/hide-code kind/tex))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def answer \n  (fn [content] \n    (kind/md \n     (str \"> <span style=\\\"color: black; font-size: 1.5em;\\\">**\" content \"**</span>\"))))\n```\n:::\n\n\nnormalize/standardize\n\n\n::: {.sourceClojure}\n```clojure\n(defn tc-col->vec\n  [data col]\n  (vec (col (tc/select-columns data col))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn normalize-column\n  \"Normalize a column using min-max normalization\"\n  [col]\n  (let [min-val (apply min col)\n        max-val (apply max col)]\n    (map #(/ (- % min-val) (- max-val min-val)) col)))\n```\n:::\n\n\nTODO: in neanderthal, use dge/mean and dge/std-dev\n\n\n::: {.sourceClojure}\n```clojure\n(defn standardize-column\n  \"Standardize a column using z-score normalization\"\n  [col]\n  (let [mean (dtf/mean col)\n        std (dtf/standard-deviation col)]\n    (map #(/ (- % mean) std) col)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn apply-to-all-columns\n  \"Apply a function to all columns of a dataset\"\n  [data func]\n  (reduce (fn [acc col-name]\n            (tc/add-column acc col-name (func (col-name data))))\n          (tc/dataset)\n          (tc/column-names data)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [data (tc/dataset {:age [20 30 35 40 50]\n                        :income [30000 40000 59000 55000 90000]\n                        :credit-score [650 700 750 800 850]})\n\n      normalized-data (apply-to-all-columns data normalize-column)]\n  (tc/dataset normalized-data))\n```\n:::\n\n\n::: {.clay-dataset}\n_unnamed [5 3]:\n\n|   :age | :income | :credit-score |\n|--------|---------|---------------|\n|      0 |       0 |             0 |\n| 0.3333 |  0.1667 |        0.2500 |\n| 0.5000 |  0.4833 |        0.5000 |\n| 0.6667 |  0.4167 |        0.7500 |\n|      1 |       1 |             1 |\n\n\n:::\n\n\ncenter\n\n\n::: {.sourceClojure}\n```clojure\n(defn matrix->dataset\n  \"Transforms a Neanderthal matrix into a Tablecloth dataset.\n   Columns are named x1 to xp, where p is the number of columns in the matrix.\"\n  [matrix]\n  (let [rows (mrows matrix)\n        cols (ncols matrix)\n        column-names (mapv #(keyword (str \"x\" (inc %))) (range cols))\n        data (for [i (range rows)]\n               (for [j (range cols)]\n                 (entry matrix i j)))]\n    (tc/dataset (map (fn [row] (zipmap column-names row)) data))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn dataset->matrix\n  \"Converts a Tablecloth dataset to a Neanderthal matrix.\"\n  [dataset]\n  (let [X (tc/rows dataset :as-seqs)]                       ;opt ':as-seq' is default\n    (dge (count X) (count (first X))                        ;{:layout :column} is default\n         (flatten X) {:layout :row})))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn center-data\n  \"Centers the data by subtracting the mean of each column.\n   Parameters:\n   - data: Neanderthal matrix to be centered\"\n  [data]\n  (let [mean-vec (dge 1 (ncols data) (map #(/ (reduce + %) (mrows data)) (trans data)))\n        centered-data (axpy -1 (mm (dge (mrows data) 1 (repeat (mrows data) 1)) mean-vec) data)]\n    centered-data))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn compute-covariance-matrix\n    \"Computes the covariance matrix of the centered data.\n    Parameters:\n    - centered-data: Centered Neanderthal matrix\"\n    [centered-data]\n    (mm (trans centered-data) centered-data))\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw1.utils.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","fontsize":"0.9em","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}